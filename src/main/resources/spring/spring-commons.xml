<?xml version="1.0" encoding="GBK"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"

        xsi:schemaLocation="
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd

        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd

        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd

        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    <context:property-placeholder location="classpath:datasource.properties"/>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485670"></property>
        <property name="defaultEncoding" value="UTF-8"></property>  <!-- 解决文件是中文的问题 -->
    </bean>


    <!--配置数据源-->
    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.dbcp.url}"></property>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="10"></property>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="500"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="10" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />

        <property name="validationQuery">
            <value>SELECT 1</value>
        </property>
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat" />
    </bean>

    <!--生成sqlSession -->
    <!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource" />
        &lt;!&ndash;  自动查找myBatis的xml配置文件，省掉sqlMapConfig.xml里的mappers手工配置 &ndash;&gt;
        <property name="mapperLocations" value="classpath:mappers/*.xml" />
    </bean>


    &lt;!&ndash; 通过 MapperScannerConfigurer自动扫描指定basePackage中的所有的接口，并且
    把sqlSession与接口结合&ndash;&gt;
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        &lt;!&ndash; 扫描mapper层&ndash;&gt;
        <property name="basePackage" value="com.fh.shop.admin.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSession" />
    </bean>-->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
        <property name="configuration">
            <bean class="com.baomidou.mybatisplus.core.MybatisConfiguration">
                <property name="mapUnderscoreToCamelCase" value="false"/>
            </bean>
        </property>
        <property name="globalConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig">
                <property name="dbConfig">
                    <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
                        <!--主键规则-->
                        <property name="idType" value="AUTO"/>
                        <!--表前缀-->
                        <property name="tablePrefix" value="t_"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="plugins">
            <array>
                <!--打印sql语句-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor"></bean>
                <!--分页-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"></bean>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.fh.shop.admin.mapper"/>
    </bean>
    <context:component-scan base-package="com.fh.shop.admin.biz"></context:component-scan>
    <bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>
    <!-- 配置事务的传播特性 -->
    <tx:advice id="ta" transaction-manager="tm"><!-- 配置事务管理器 -->
        <tx:attributes>
            <tx:method name="query*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="buid*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="export*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="import*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="batch*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" read-only="true"/>
            <!-- 如果不是以上三种，则配置成只读事务(如select)。只读事务可以提高性能，当更新某个对象时，将不会再做脏数据检查。(因为是只读的并不用更新，所以不用再作比较,判断是否读取到脏数据。) -->
        </tx:attributes>
    </tx:advice>
    <!-- .. 代表改包下任意嵌套层次的子包 -->
    <!-- 切点配置 execution(* com.fh.service.impl.*.*(..)) 第一个*：任意返回值 第二个*：
          包下任意的类 第三个*：类中的所有方法 (..)：任意参数 -->
    <aop:config>
        <aop:advisor pointcut="execution(* com.fh.shop.admin.biz..*.*(..))" advice-ref="ta"/>
    </aop:config>
</beans>
